// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  posts                 Post[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Account {
  id                    String                  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?                 @db.Text
  access_token          String?                 @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  user                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id                    String                  @id @default(cuid())
  title                 String                  @db.VarChar(100) 
  content               String                  @db.VarChar(1000) 
  published             Boolean                 @default(false)
  imageUrls             String[]
  authorId              String

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  author                User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categories            PostCategories[] 

  @@unique([authorId, title])
}

model Categories {
  id                    String                  @id @default(cuid())
  name                  String                  @unique @db.VarChar(100)
  slug                  String                  @unique @db.VarChar(100)
  imageUrl              String?
  description           String?                 @db.VarChar(250)
  posts                 PostCategories[]
}

model PostCategories {
  postId                 String
  categoryId             String

  post                   Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)

  category               Categories             @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model VerificationToken {
  id                   String                    @id @default(cuid())
  email                String
  token                String                    @unique
  expires              DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                   String                    @id @default(cuid())
  email                String
  token                String                    @unique
  expires              DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                    String                    @id @default(cuid())
  email                 String
  token                 String                    @unique
  expires               DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                    String                    @id @default(cuid())

  userId                String
  user                  User                      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
